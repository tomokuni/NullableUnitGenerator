// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NullableUnitGenerator.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\GitHub\NullableUnitGenerator\UnitGenerator\Template\IOptionalTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class IOptionalTemplate : IOptionalTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY NullableUnitGenerator. DO" +
                    " NOT CHANGE IT.\r\n// </auto-generated>\r\n#pragma warning disable CS8669  // Null 許" +
                    "容参照型の注釈は、\'#nullable\' 注釈のコンテキスト内のコードでのみ使用する必要があります。自動生成されたコードには、ソースに明示的な \'#nullab" +
                    "le\' ディレクティブが必要です。\r\n#pragma warning disable CS8632\t// \'#nullable\' 注釈コンテキスト内のコードでの" +
                    "み、Null 許容参照型の注釈を使用する必要があります。\r\nusing System;\r\n\r\nnamespace NullableUnitGenerator;\r" +
                    "\n\r\n\r\npublic interface IOptional<T>\r\n{\r\n    /// <summary>undefined value instance" +
                    ".</summary>\r\n    static object? UndefinedValue { get; }\r\n    //public static Opt" +
                    "ion UndefinedValue\r\n    //    => new();\r\n\r\n    /// <summary>null value instance." +
                    "</summary>\r\n    static object? NullValue { get; }\r\n    //public static Option Nu" +
                    "llValue\r\n    //    => new((T?)null);\r\n\r\n    /// <summary>default value instance." +
                    "</summary>\r\n    static object? DefaultValue { get; }\r\n    //public static Option" +
                    " DefaultValue\r\n    //    => new(default(T));\r\n\r\n    /// <summary>default value i" +
                    "nstance.</summary>\r\n    static Type? PrimitiveType { get; }\r\n    //public static" +
                    " Type PrimitiveType\r\n    //    => typeof(T);\r\n\r\n\r\n    /// <summary><see langword" +
                    "=\"true\"/> if undefined; otherwise, <see langword=\"false\"/>.</summary>\r\n    /// <" +
                    "returns><b><see langword=\"true\"/></b> : if undefined</returns>\r\n    public bool " +
                    "IsUndefined { get; } // = true;\r\n\r\n    /// <summary><see langword=\"true\"/> if nu" +
                    "ll; otherwise, <see langword=\"false\"/>.</summary>\r\n    /// <returns><b><see lang" +
                    "word=\"true\"/></b> : if null</returns>\r\n    public bool IsNull { get; } // = true" +
                    ";\r\n    \r\n    /// <summary>return value if HasValue is true; otherwise, throw Inv" +
                    "alidOperationException(\"NoValue\")</summary>\r\n    /// <returns><b>value</b> : if " +
                    "HasValue is true<br/><b>throw InvalidOperationException(\"NoValue\")</b> : otherwi" +
                    "se</returns>\r\n    public T Value { get; } \r\n    //    => HasValue ? m_value : th" +
                    "row new InvalidOperationException(\"NoValue\");\r\n    //internal readonly T m_value" +
                    "; \r\n\r\n\r\n    /// <summary><see langword=\"true\"/> if not undefined and not null; o" +
                    "therwise, <see langword=\"false\"/>.</summary>\r\n    /// <returns><b><see langword=" +
                    "\"true\"/></b> : if not undefined and not null</returns>\r\n    public bool HasValue" +
                    " { get; } \r\n    //    => !(IsUndefined || IsNull);\r\n\r\n\r\n    /// <inheritdoc cref" +
                    "=\"Value\" />\r\n    public T AsPrimitive();\r\n    //    => Value;\r\n\r\n    /// <summar" +
                    "y>return value if HasValue is true; otherwise, <see langword=\"default(T)\"/></sum" +
                    "mary>\r\n    /// <returns><b>value</b> : if assigned and not null<br/><b><see lang" +
                    "word=\"default(T)\"/></b> : otherwise</returns>\r\n    public T OrDefault();\r\n    //" +
                    "    => HasValue ? m_value : default(T);\r\n\r\n    /// <summary>return value if HasV" +
                    "alue is true; otherwise, defaultValue</summary>\r\n    /// <returns><b>value</b> :" +
                    " if assigned and not true<br/><b>defaultValue</b> : otherwise</returns>\r\n    ///" +
                    " <!-- T? 型にしたいけど、継承できないので object? で代用する -->\r\n    public object? OrDefault(object" +
                    "? defaultValue);\r\n    //    => HasValue ? m_value : defaultValue;\r\n    ///// <in" +
                    "heritdoc cref=\"OrDefault\" />\r\n    //public int? OrDefault(int? defaultValue)\r\n  " +
                    "  //    => HasValue ? m_value : defaultValue;\r\n\r\n    /// <summary>return value i" +
                    "f HasValue is true; otherwise, null</summary>\r\n    /// <returns><b>value</b> : i" +
                    "f HasValue is true<br/><b><see langword=\"null\"/></b> : otherwise</returns>\r\n    " +
                    "/// <!-- T? 型にしたいけど、継承できないので object? で代用する -->\r\n    public object? OrNull();\r\n  " +
                    "  //    => (T?)(HasValue ? m_value : null);\r\n\r\n    /// <inheritdoc cref=\"Value\" " +
                    "/>\r\n    public T OrThrow();\r\n    //    => Value;\r\n\r\n    /// <summary>\r\n    /// r" +
                    "eturn true and out parameter value if HasValue is true; otherwise, false.\r\n    /" +
                    "// </summary>\r\n    /// <param name=\"value\">value</param>\r\n    /// <returns><b><s" +
                    "ee langword=\"true\"/> and out parameter value</b> : if HasValue is true,</returns" +
                    ">\r\n    public bool TryGet(out T value);\r\n    //{\r\n    //    value = m_value;\r\n  " +
                    "  //    return HasValue;\r\n    //}\r\n\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class IOptionalTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 17.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NullableUnitGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class CodeTemplate : CodeTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY NullableUnitGenerator. DO NOT CHANGE IT.
// </auto-generated>
#pragma warning disable IDE0079 // 不要な抑制を削除します
#pragma warning disable CS8669  // Null 許容参照型の注釈は、'#nullable' 注釈のコンテキスト内のコードでのみ使用する必要があります。自動生成されたコードには、ソースに明示的な '#nullable' ディレクティブが必要です。
#pragma warning disable CS8632	// '#nullable' 注釈コンテキスト内のコードでのみ、Null 許容参照型の注釈を使用する必要があります。
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
");
 if (HasFlag(UnitGenOpts.JsonConverter)) { 
            this.Write("using System.Text.Json;\r\nusing System.Text.Json.Serialization;\r\n");
 } 
 if (HasFlag(UnitGenOpts.DapperTypeHandler)) { 
            this.Write("#if !UGO_DAPPER_DISABLE\r\nusing System.Runtime.CompilerServices;\r\n#endif\r\n");
 } 
 if (HasFlag(UnitGenOpts.MessagePackFormatter)) { 
            this.Write("#if !UGO_MESSAGEPACK_DISABLE\r\nusing MessagePack;\r\nusing MessagePack.Formatters;\r\n" +
                    "#endif\r\n");
 } 
            this.Write("\r\nusing NullableUnitGenerator;\r\n\r\n");
 if (!string.IsNullOrEmpty(Namespace)) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write(";\r\n");
 } 
            this.Write("\r\n\r\n/// <summary>\r\n/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" is TernaryType ValueObject<br/>\r\n/// Primitive type is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameFull));
            this.Write(")\r\n/// </summary>\r\n");
 if (HasFlag(UnitGenOpts.MessagePackFormatter)) { 
            this.Write("[MessagePackFormatter(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("MessagePackFormatter))]\r\n");
 } 
 if (HasFlag(UnitGenOpts.JsonConverter)) { 
            this.Write("[JsonConverter(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("JsonConverter))]\r\n");
 } 
            this.Write("[System.ComponentModel.TypeConverter(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("TypeConverter))]\r\npublic readonly partial struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" : IUnitOf<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(">, IEquatable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(">, IEqualityComparer<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasFlag(UnitGenOpts.IComparable) && HasCompareToMethod ? $", IComparable<{Name}>" : ""));
            this.Write("\r\n{\r\n    // Namespace : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace ?? "(null)"));
            this.Write("\r\n    // Name      : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("\r\n    // UnitGenOpts : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Options));
            this.Write("\r\n    // ToStringFormat      : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToStringFormat ?? "(null)"));
            this.Write("\r\n    //\r\n    // TypeName         : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName ?? "(null)"));
            this.Write("\r\n    // TypeNameFull     : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameFull ?? "(null)"));
            this.Write("\r\n    // TypeNameNullable : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable ?? "(null)"));
            this.Write("\r\n    // IsValueType : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IsValueType));
            this.Write("\r\n    // IsArray     : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IsArray));
            this.Write("\r\n    // IsUlid      : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IsUlid));
            this.Write("\r\n    // HasArithmeticIncDecOperator    : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasArithmeticIncDecOperator));
            this.Write("\r\n    // HasArithmeticAddSubOperator    : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasArithmeticAddSubOperator));
            this.Write("\r\n    // HasArithmeticMulDevModOperator : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasArithmeticMulDevModOperator));
            this.Write("\r\n    // HasComparisonOperator          : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasComparisonOperator));
            this.Write("\r\n    // HasParseMethod     : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasParseMethod));
            this.Write("\r\n    // HasCompareToMethod : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasCompareToMethod));
            this.Write("\r\n    // HasMinMaxMethod    : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasMinMaxMethod));
            this.Write("\r\n    // IsBuiltinIntegralType : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IsBuiltinIntegralType));
            this.Write("\r\n    // IsBuiltinFloatingType : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IsBuiltinFloatingType));
            this.Write("\r\n    // IsBuiltinNumericType  : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IsBuiltinNumericType));
            this.Write("\r\n    // IsSupportUtf8Formatter() : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(IsSupportUtf8Formatter()));
            this.Write("\r\n    // GetDbType() : ");
            this.Write(this.ToStringHelper.ToStringWithCulture("DbType." + GetDbType().ToString()));
            this.Write("\r\n    //\r\n    // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" support method\r\n    //   ");
            this.Write(this.ToStringHelper.ToStringWithCulture(OperatorsString ?? "(null)"));
            this.Write("\r\n    //\r\n    // ITypeSymbol Info\r\n");
 foreach(var k in DicTypeName.Keys){ 
            this.Write("    //   ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DicTypeName[k]));
            this.Write("\r\n");
 } 
            this.Write("\r\n\r\n    //\r\n    // backing field\r\n    //\r\n\r\n    readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" m_value = default;\r\n    readonly UnitState m_state = UnitState.Undef;\r\n    reado" +
                    "nly IList<string>? m_validateMessage = null;\r\n\r\n\r\n    //\r\n    // Constructor\r\n  " +
                    "  //\r\n\r\n    /// <summary>Complete Constructor</summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("()\r\n    { }\r\n\r\n    /// <summary>Complete Constructor</summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value)\r\n    {\r\n        (m_state, m_value) = (value.m_state, value.m_value);\r\n\r\n " +
                    "       m_validateMessage = this.Validation();\r\n    }\r\n\r\n    /// <summary>Complet" +
                    "e Constructor</summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(in UnitState state, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" value = default)\r\n    {\r\n        (m_state, m_value) = (state, value) switch\r\n   " +
                    "     {\r\n            (UnitState.Undef, _) => (state, default),\r\n            (Unit" +
                    "State.Null, _) => (state, default),\r\n");
 if (!IsValueType) { 
            this.Write("            (_, null) => (state, default),\r\n");
 } 
            this.Write("            _ => (state, value)\r\n        };\r\n\r\n        m_validateMessage = this.V" +
                    "alidation();\r\n    }\r\n\r\n");
 if (IsValueType) { 
            this.Write("    /// <summary>Complete Constructor</summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" value)\r\n    {\r\n        (m_state, m_value) = (UnitState.Value, value);\r\n\r\n       " +
                    " m_validateMessage = this.Validation();\r\n    }\r\n");
 } 
            this.Write("\r\n    /// <summary>Complete Constructor</summary>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(" value)\r\n    {\r\n        (m_state, m_value) = value switch\r\n        {\r\n           " +
                    " null => (UnitState.Null, default),\r\n            _ => (UnitState.Value, (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(@")value),
        };

        m_validateMessage = this.Validation();
    }


    //
    // static define
    //

    /// <summary>Display string as Undef.</summary>
    public static readonly string sUndef = $""({UnitState.Undef})"";

    /// <summary>Display string as Null.</summary>
    public static readonly string sNull = $""({UnitState.Null})"";

");
if (IsBuiltinNumericType) { 
            this.Write("\r\n    //\r\n    // MaxValue, MinValue\r\n    //\r\n\r\n    /// <summary>Represents the la" +
                    "rgest possible value. This field is constant.</summary>\r\n    public static reado" +
                    "nly  ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" MaxValue = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".MaxValue;\r\n\r\n    /// <summary>Represents the smallest possible value. This field" +
                    " is constant.</summary>\r\n    public static readonly  ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" MinValue = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".MinValue;\r\n\r\n");
 } 
            this.Write("\r\n    //\r\n    // static property\r\n    //\r\n\r\n    /// <summary>Undefined value inst" +
                    "ance.</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" UndefValue { get; } = new(UnitState.Undef, default);\r\n\r\n    /// <summary>Null va" +
                    "lue instance.</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" NullValue { get; } = new(UnitState.Null, default);\r\n\r\n    /// <summary>Value sta" +
                    "te default value instance.</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" DefaultValueOfValueState   { get; } = new(UnitState.Value, default);\r\n\r\n\r\n    //" +
                    "/ <summary>base type.</summary>\r\n    public static Type BaseType { get; } = type" +
                    "of(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(@");

    /// <summary>Is base type nullable?</summary>
    public static bool IsNullable { get; }
        = !BaseType.IsValueType                             // 値型でない -> Nullable
        || Nullable.GetUnderlyingType(BaseType) != null;    // 非Null許容型が取得できる -> Null許容演算子が指定されている -> Nullable


    //
    // static method
    //

    /// <summary>Determines if either value is undefined or null.</summary>
    /// <returns>
    /// Return Value – Description<br/>
    /// <b>UnitState.Undef</b> – if either value is undefined.<br/>
    /// <b>UnitState.Null</b> – if either value is null.<br/>
    /// <b>UnitState.Value</b> – if either value is set.
    /// </returns>
    public static UnitState CheckState(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y, out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" result)\r\n    {\r\n        var (state, outVal) = (x, y) switch\r\n        {\r\n        " +
                    "    { x.IsUndef: true } => (UnitState.Undef, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".UndefValue),\r\n            { y.IsUndef: true } => (UnitState.Undef, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".UndefValue),\r\n            { x.IsNull: true } => (UnitState.Null, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".NullValue),\r\n            { y.IsNull: true } => (UnitState.Null, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".NullValue),\r\n            _ => (UnitState.Value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@".DefaultValueOfValueState  ),
        };
        result = outVal;
        return state;
    }

    /// <summary>Determine if a value is undefined or null.</summary>
    /// <returns>
    /// Return Value – Description<br/>
    /// <b>UnitState.Undef</b> – if value is undefined.<br/>
    /// <b>UnitState.Null</b> – if value is null.<br/>
    /// <b>UnitState.Value</b> – if value is set.
    /// </returns>
    public static UnitState CheckState(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" result)\r\n    {\r\n        var (state, outVal) = x switch\r\n        {\r\n            {" +
                    " IsUndef: true } => (UnitState.Undef, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".UndefValue),\r\n            { IsNull: true } => (UnitState.Null, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".NullValue),\r\n            _ => (UnitState.Value, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".DefaultValueOfValueState  ),\r\n        };\r\n        result = outVal;\r\n        retu" +
                    "rn state;\r\n    }\r\n\r\n\r\n    //\r\n    // get state\r\n    //\r\n\r\n    /// <summary><see " +
                    "langword=\"true\"/> if undefined; otherwise.</summary>\r\n    /// <returns><b><see l" +
                    "angword=\"true\"/></b> : if undefined</returns>\r\n    public bool IsUndef\r\n        " +
                    "=> m_state == UnitState.Undef;\r\n\r\n    /// <summary><see langword=\"true\"/> if nul" +
                    "l; otherwise.</summary>\r\n    /// <returns><b><see langword=\"true\"/></b> : if nul" +
                    "l</returns>\r\n    public bool IsNull\r\n        => m_state == UnitState.Null;\r\n\r\n  " +
                    "  /// <summary><see langword=\"true\"/> if undefined or null; otherwise.</summary>" +
                    "\r\n    /// <returns><b><see langword=\"true\"/></b> : if null or undefined</returns" +
                    ">\r\n    public bool IsUndefOrNull\r\n        => m_state != UnitState.Value;\r\n\r\n    " +
                    "/// <summary><see langword=\"true\"/> if null or hasValue; otherwise.</summary>\r\n " +
                    "   /// <returns><b><see langword=\"true\"/></b> : if null or hasValue</returns>\r\n " +
                    "   public bool IsNullOrHasValue\r\n        => m_state != UnitState.Undef;\r\n\r\n    /" +
                    "// <summary><see langword=\"true\"/> if not undefined and not null; otherwise.</su" +
                    "mmary>\r\n    /// <returns><b><see langword=\"true\"/></b> : if hasValuel</returns>\r" +
                    "\n    public bool HasValue\r\n        => m_state == UnitState.Value;\r\n\r\n    /// <su" +
                    "mmary>return value state.</summary>\r\n    /// <returns>\r\n    /// <b>Undef</b><br/" +
                    ">\r\n    /// <b>Null</b><br/>\r\n    /// <b>Value</b>\r\n    /// </returns>\r\n    publi" +
                    "c UnitState State\r\n        => m_state;\r\n\r\n\r\n    //\r\n    // get value\r\n    //\r\n\r\n" +
                    "    /// <summary>return value if HasValue is true; otherwise, throw InvalidOpera" +
                    "tionException()</summary>\r\n    /// <returns>\r\n    /// <b>value</b> : if HasValue" +
                    " is true<br/>\r\n    /// <b>throw InvalidOperationException(\"Value is Null.\")</b> " +
                    ": if IsNull is true<br/>\r\n    /// <b>throw InvalidOperationException(\"Value is U" +
                    "ndef.\")</b> : if IsUndef is true\r\n    /// </returns>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" Value\r\n        => GetOrThrow();\r\n\r\n    /// <inheritdoc cref=\"Value\" />\r\n    publ" +
                    "ic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" AsPrimitive()\r\n        => Value;\r\n\r\n    /// <summary>return raw value</summary>\r" +
                    "\n    /// <returns>inner raw value</returns>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(@"  GetRawValue()
        => m_value;

    /// <summary>return raw value</summary>
    /// <returns>inner raw value</returns>
    public object GetRawValueAsObject()
        => m_value;

    /// <summary>return value if HasValue is true; otherwise, defaultValue</summary>
    /// <returns>
    /// <b>value</b> : if assigned and not null<br/>
    /// <b>defaultValue</b> : otherwise
    /// </returns>
    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" GetOr(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" defaultValue)\r\n        => HasValue ? m_value : defaultValue;\r\n\r\n");
 if (IsValueType) { 
            this.Write("    /// <summary>return value if HasValue is true; otherwise, defaultValue</summa" +
                    "ry>\r\n    /// <returns>\r\n    /// <b>value</b> : if assigned and not null<br/>\r\n  " +
                    "  /// <b>defaultValue</b> : otherwise\r\n    /// </returns>\r\n    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(" GetOr(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(" defaultValue)\r\n        => HasValue ? m_value : defaultValue;\r\n");
 } 
            this.Write(@"
    /// <summary>return value if HasValue is true; otherwise, <see langword=""default""/></summary>
    /// <returns>
    /// <b>value</b> : if assigned and not null<br/>
    /// <b><see langword=""default""/></b> : otherwise
    /// </returns>
    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(@" GetOrDefault()
        => GetOr(default);

    /// <summary>return value if HasValue is true; otherwise, <see langword=""null""/></summary>
    /// <returns>
    /// <b>value</b> : if assigned and not null<br/>
    /// <b><see langword=""null""/></b> : otherwise
    /// </returns>
    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(" GetOrNull()\r\n        => GetOr(null);\r\n\r\n    /// <inheritdoc cref=\"Value\" />\r\n   " +
                    " public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(@" GetOrThrow()
        => (m_state, m_value) switch
        {
            (UnitState.Value, _) => m_value,
            (UnitState.Null, _) => throw new InvalidOperationException($""Value is {UnitState.Null}.""),
            _ => throw new InvalidOperationException($""Value is {UnitState.Undef}.""),
        };

    /// <summary>return true and out parameter value if HasValue is true; otherwise, false.</summary>
    /// <param name=""value"">value</param>
    /// <param name=""defaultValue"">defaultValue</param>
    /// <returns><b><see langword=""true""/> and out parameter value</b> : if HasValue is true,</returns>
    public bool TryGet(out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" value, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(@" defaultValue = default)
    {
        value = HasValue ? m_value : defaultValue;
        return HasValue;
    }


    //
    // GetHashCode
    //

    /// <inheritdoc/>
    public override int GetHashCode()
        => (m_state, m_value).GetHashCode();

    /// <inheritdoc/>
    public int GetHashCode(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@" obj)
        => (obj.m_state, obj.m_value).GetHashCode();


    //
    // ToString
    //

    /// <summary>Returns this instance of System.String; no actual conversion is performed.</summary>
    /// <returns>The current string.</returns>
    public override string ToString()
");
 if (ToStringFormat == null) { 
            this.Write("        => HasValue ? $\"{m_value}\" : (IsNull ? sNull : sUndef);\r\n");
 } else { 
            this.Write("        => HasValue ? string.Format(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToStringFormat));
            this.Write("\", m_value) : (IsNull ? sNull : sUndef);\r\n");
 } 
            this.Write(@"
    /// <summary>Returns this instance of System.String with the conversion specified by format.</summary>
    /// <returns>The specified string value.</returns>
    public string ToString(string format)
        => HasValue ? ((dynamic)m_value).ToString(format) : (IsNull ? sNull : sUndef);


    //
    // Validate
    //

    /// <summary>IsValid</summary>
    public bool IsValid()
        => !m_validateMessage.Any();

    /// <summary>Validation</summary>
    private IList<string> Validation() {
        var msg = ValidationWithUnitOfValidateAttribute();
        ValidationWithCustomCode(ref msg);
        return msg.AsReadOnly();
    }

    /// <summary>ValidationWithUnitOfValidateAttribute</summary>
    private List<string> ValidationWithUnitOfValidateAttribute()
    {
        var msg = new List<string>();
        var va = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@").GetCustomAttributes<ValidationAttribute>();
        foreach (var a in va)
        {
            if (a is IUnitValidationAttribute && !a.IsValid(this))
            {
                var context = new ValidationContext(this, null, null);
                var result = a.GetValidationResult(this, context);
                if (result!.ErrorMessage is not null)
                    msg.Add(result.ErrorMessage);
            }
        }
        return msg;
    }

    /// <summary>ValidationWithCustomCode</summary>
    partial void ValidationWithCustomCode(ref List<string> refMsg);

");
 if (TypeName == "Guid" || TypeName == "System.Guid") { 
            this.Write("\r\n    //\r\n    // Guid\r\n    //\r\n\r\n    /// <summary>NewGuid</summary>\r\n    /// <ret" +
                    "urns>Guid.NewGuid()</returns>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" New()\r\n        => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(Guid.NewGuid());\r\n\r\n    /// <inheritdoc cref=\"New()\" />\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" New");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("()\r\n        => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(Guid.NewGuid());\r\n\r\n");
 } 
 if (TypeName == "Ulid" || TypeName == "System.Ulid") { 
            this.Write("\r\n    //\r\n    // Ulid\r\n    //\r\n\r\n    /// <summary>NewUlid</summary>\r\n    /// <ret" +
                    "urns>Ulid.NewUlid()</returns>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" New()\r\n        => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(Ulid.NewUlid());\r\n\r\n    /// <inheritdoc cref=\"New()\" />\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" New");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("()\r\n        => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(Ulid.NewUlid());\r\n\r\n");
 } 
 if (TypeName == "bool") { 
            this.Write("\r\n    //\r\n    // bool operator\r\n    //\r\n\r\n    /// <summary>operator true</summary" +
                    ">\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" operator true(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x)\r\n        => x.HasValue\r\n           ? x.m_value\r\n           : x.IsUndef ? Unde" +
                    "fValue : NullValue;\r\n\r\n    /// <summary>operator false</summary>\r\n    public sta" +
                    "tic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" operator false(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x)\r\n        => x.HasValue\r\n           ? !x.m_value\r\n           : x.IsUndef ? Und" +
                    "efValue : NullValue;\r\n\r\n    /// <summary>operator !</summary>\r\n    public static" +
                    " ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" operator !(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x)\r\n        => x.HasValue\r\n           ? !x.m_value\r\n           : x.IsUndef ? Und" +
                    "efValue : NullValue;\r\n\r\n");
 } 
            this.Write("\r\n    //\r\n    // implicit, explicit operator    // UnitGenOpts.ImplicitOperator o" +
                    "r Unspecified\r\n    //\r\n\r\n");
 if (HasFlag(UnitGenOpts.ImplicitOperator)) { 
            this.Write("    /// <summary>implicit(暗黙的) operator</summary>\r\n    public static implicit ope" +
                    "rator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value)\r\n        => (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")value.GetOrThrow();\r\n\r\n    /// <summary>implicit(暗黙的) operator</summary>\r\n    //" +
                    "/ <returns>");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value.</returns>\r\n    public static implicit operator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" value)\r\n        => new(value);\r\n\r\n");
 if (IsValueType) { 
            this.Write("    /// <summary>implicit(暗黙的) operator</summary>\r\n    /// <returns>");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(" value.</returns>\r\n    public static implicit operator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value)\r\n        => (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")value.GetOrNull();\r\n\r\n    /// <summary>implicit(暗黙的) operator</summary>\r\n    ///" +
                    " <returns>");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value.</returns>\r\n    public static implicit operator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(" value)\r\n        => new(value);\r\n");
 } 
 } else { 
            this.Write("    /// <summary>explicit(明示的) operator</summary>\r\n    public static explicit ope" +
                    "rator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value)\r\n        => (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")value.GetOrThrow();\r\n\r\n    /// <summary>explicit(明示的) operator</summary>\r\n    //" +
                    "/ <returns>");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value.</returns>\r\n    public static explicit operator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" value)\r\n        => new(value);\r\n\r\n");
 if (IsValueType) { 
            this.Write("    /// <summary>explicit(明示的) operator</summary>\r\n    /// <returns>");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(" value.</returns>\r\n    public static explicit operator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value)\r\n        => (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")value.GetOrNull();\r\n\r\n    /// <summary>explicit(明示的) operator</summary>\r\n    ///" +
                    " <returns>");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value.</returns>\r\n    public static explicit operator ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(" value)\r\n        => new(value);\r\n");
 } 
 } 
            this.Write("\r\n\r\n    //\r\n    // Equals, IEquatable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(">\r\n    //\r\n\r\n    /// <inheritdoc/>\r\n    public bool Equals(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" other)\r\n");
 if (IsValueType) { 
            this.Write("        => m_state.Equals(other.m_state) && m_value.Equals(other.m_value);\r\n");
 } else { 
            this.Write("        => m_state.Equals(other.m_state) && (m_value?.Equals(other.m_value) ?? ot" +
                    "her.m_value is null);\r\n");
 } 
            this.Write("\r\n    /// <inheritdoc/>\r\n    public bool Equals(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.Equals(y);\r\n\r\n    /// <inheritdoc/>\r\n    public override bool E" +
                    "quals(object? obj)\r\n        => obj is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@" uo && Equals(uo);


    //
    // ==, != operator
    //

    /// <summary>Returns a value indicating whether two instances are same value.</summary>
    /// <returns>true if other has the same value as this instance; otherwise, false.</returns>
    public static bool operator ==(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@" y)
        => x.Equals(y);

    /// <summary>Returns a value indicates whether two instances are different values.</summary>
    /// <returns>true if other has the same value as this instance; otherwise, false.</returns>
    public static bool operator !=(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => !(x == y);\r\n\r\n\r\n    //\r\n    // CompareTo, IComparable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(">    // UnitGenOpts.IComparable\r\n    //\r\n");
 if (HasFlag(UnitGenOpts.IComparable)) { 
            this.Write("\r\n");
 if (HasCompareToMethod) { 
            this.Write("    /// <summary>Compares this instance to a specified ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@" and returns an indication of their relative values.</summary>
    /// <returns>
    /// A signed number indicating the relative values of this instance and value.<br/>
    /// <b>Return Value</b> – Description<br/>
    /// <b>Less than zero</b> – This instance is less than value.<br/>
    /// <b>Zero</b> – This instance is equal to value.<br/>
    /// <b>Greater than zero</b> – This instance is greater than value.
    /// </returns>
    public int CompareTo(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" other)\r\n        => HasValue && other.HasValue\r\n           ? m_value.CompareTo(ot" +
                    "her.m_value)\r\n           : 0;\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support method CompareTo\r\n");
 } 
 } else { 
            this.Write("        // No option specified\r\n");
 } 
            this.Write("\r\n\r\n    //\r\n    // >, <, >=, <= operator    // UnitGenOpts.ComparisonOperator\r\n  " +
                    "  //\r\n");
 if (HasFlag(UnitGenOpts.ComparisonOperator)) { 
            this.Write("\r\n");
 if (HasComparisonOperator) { 
            this.Write("    /// <summary>operator &gt; (GreaterThan)</summary>\r\n    public static bool op" +
                    "erator >(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? x.m_value > y.m_value\r\n   " +
                    "        : false;\r\n\r\n    /// <summary>operator &lt; (LessThan)</summary>\r\n    pub" +
                    "lic static bool operator <(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? x.m_value < y.m_value\r\n   " +
                    "        : false;\r\n\r\n    /// <summary>operator &gt;= (GreaterThanOrEqual)</summar" +
                    "y>\r\n    public static bool operator >=(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? x.m_value >= y.m_value\r\n  " +
                    "         : false;\r\n\r\n    /// <summary>operator &lt;= (LessThanOrEqual)</summary>" +
                    "\r\n    public static bool operator <=(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? x.m_value <= y.m_value\r\n  " +
                    "         : false;\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater > (GreaterThan)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater < (LessThan)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater >= (GreaterThanOrEqual)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater <= (LessThanOrEqual)\r\n");
 } 
 } else { 
            this.Write("        // No option specified\r\n");
 } 
            this.Write("\r\n\r\n    //\r\n    // +, -, *, /, % operator    UnitGenOpts.ArithmeticOperator\r\n    " +
                    "//\r\n");
 if (HasFlag(UnitGenOpts.ArithmeticOperator)) { 
            this.Write("\r\n");
 if (HasArithmeticAddSubOperator) { 
            this.Write("    /// <summary>operator + (Addition)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator +(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value + y.m_value)))\r\n           : (x.IsUndef || y.IsUndef) ? UndefValue : " +
                    "NullValue;\r\n\r\n    /// <summary>operator - (Subtraction)</summary>\r\n    public st" +
                    "atic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator -(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value - y.m_value)))\r\n           : (x.IsUndef || y.IsUndef) ? UndefValue : " +
                    "NullValue;\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater + (Addition)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater - (Subtraction)\r\n");
 } 
            this.Write("\r\n");
 if (HasArithmeticMulDevModOperator) { 
            this.Write("    /// <summary>operator * (Multiply)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator *(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value * y.m_value)))\r\n           : (x.IsUndef || y.IsUndef) ? UndefValue : " +
                    "NullValue;\r\n\r\n    /// <summary>operator / (Division)</summary>\r\n    public stati" +
                    "c ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator /(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value / y.m_value)))\r\n           : (x.IsUndef || y.IsUndef) ? UndefValue : " +
                    "NullValue;\r\n\r\n    /// <summary>operator % (Modulus)</summary>\r\n    public static" +
                    " ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator %(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value % y.m_value)))\r\n           : (x.IsUndef || y.IsUndef) ? UndefValue : " +
                    "NullValue;\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater * (Multiply)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater / (Division)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater % (Modulus)\r\n");
 } 
 } else { 
            this.Write("        // No option specified\r\n");
 } 
            this.Write("\r\n\r\n    //\r\n    // ++, --, +, -, *, /, % operator    UnitGenOpts.ValueArithmeticO" +
                    "perator\r\n    //\r\n");
 if (HasFlag(UnitGenOpts.ValueArithmeticOperator)) { 
            this.Write("\r\n");
 if (HasArithmeticIncDecOperator) { 
            this.Write("    /// <summary>operator ++ (Increment)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator ++(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x)\r\n        => x.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value + 1)))\r\n           : x.IsUndef ? UndefValue : NullValue;\r\n\r\n    /// <" +
                    "summary>operator -- (Decrement)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator --(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x)\r\n        => x.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value - 1)))\r\n           : x.IsUndef ? UndefValue : NullValue;\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater ++ (Increment)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater -- (Decrement)\r\n");
 } 
            this.Write("\r\n");
 if (HasArithmeticAddSubOperator) { 
            this.Write("    /// <summary>operator + (Addition)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator +(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" y)\r\n        => x.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value + y)))\r\n           : x.IsUndef ? UndefValue : NullValue;\r\n\r\n    /// <" +
                    "summary>operator - (Subtraction)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator -(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" y)\r\n        => x.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value - y)))\r\n           : x.IsUndef ? UndefValue : NullValue;\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater + (Addition)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater - (Subtraction)\r\n");
 } 
            this.Write("\r\n");
 if (HasArithmeticMulDevModOperator) { 
            this.Write("    /// <summary>operator * (Multiply)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator *(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" y)\r\n        => x.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value * y)))\r\n           : x.IsUndef ? UndefValue : NullValue;\r\n\r\n    /// <" +
                    "summary>operator / (Division)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator /(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" y)\r\n        => x.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value / y)))\r\n           : x.IsUndef ? UndefValue : NullValue;\r\n\r\n    /// <" +
                    "summary>operator % (Modulus)</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator %(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" y)\r\n        => x.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(checked ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")(x.m_value % y)))\r\n           : x.IsUndef ? UndefValue : NullValue;\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater * (Multiply)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater / (Division)\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" is types that do not support operater % (Modulus)\r\n");
 } 
 } else { 
            this.Write("        // No option specified\r\n");
 } 
            this.Write("\r\n\r\n    //\r\n    // Parse, TryParse    // UnitGenOpts.ParseMethod\r\n    //\r\n");
 if (HasFlag(UnitGenOpts.ParseMethod)) { 
            this.Write("\r\n");
 if (HasParseMethod) { 
            this.Write(@"    /// <summary>Converts the string representation of a number.</summary>
    /// <returns>A equivalent to the number contained in s.</returns>
    /// <exception cref=""System.ArgumentNullException"" >s is null.</exception>
    /// <exception cref=""System.FormatException"" >is not in the correct format.</exception>
    /// <exception cref=""System.OverflowException"" >s represents a number less than MinValue or greater than MaxValue.</exception>
    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" Parse(string s)\r\n");
 if (TypeName == "string") { 
            this.Write("        => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(s);\r\n");
 } else { 
            this.Write("        => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".Parse(s));\r\n");
 } 
            this.Write(@"
    /// <summary>Converts the string representation of a number. A return value indicates whether the conversion succeeded.</summary>
    /// <returns>true if s was converted successfully; otherwise, false.</returns>
    public static bool TryParse(string s, out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" result)\r\n    {\r\n");
 if (TypeName == "string") { 
            this.Write("        try\r\n        {\r\n            result = Parse(s);\r\n            return true;\r" +
                    "\n        }\r\n        catch\r\n        {\r\n            result = NullValue;\r\n         " +
                    "   return false;\r\n        }\r\n");
 } else { 
            this.Write("        if(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".TryParse(s, out var r))\r\n        {\r\n            result = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(r);\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            r" +
                    "esult = NullValue;\r\n            return false;\r\n        }\r\n");
 } 
            this.Write("    }\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" is types that do not support Method Parse\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" is types that do not support Method TryParse\r\n");
 } 
 } else { 
            this.Write("        // No option specified\r\n");
 } 
            this.Write("\r\n\r\n    //\r\n    // Min, Max     // UnitGenOpts.MinMaxMethod\r\n    //\r\n");
 if (HasFlag(UnitGenOpts.MinMaxMethod)) { 
            this.Write("\r\n");
 if (HasMinMaxMethod) { 
            this.Write("    /// <summary>Min</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" Min(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")Math.Max(x.m_value, y.m_value))\r\n           : (x.IsUndef || y.IsUndef) ? UndefVa" +
                    "lue : NullValue;\r\n\r\n    /// <summary>Max</summary>\r\n    public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" Max(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" x, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" y)\r\n        => x.HasValue && y.HasValue\r\n           ? new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")Math.Max(x.m_value, y.m_value))\r\n           : (x.IsUndef || y.IsUndef) ? UndefVa" +
                    "lue : NullValue;\r\n");
 } else { 
            this.Write("        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" is types that do not support method Min\r\n        // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" is types that do not support method Max\r\n");
 } 
 } else { 
            this.Write("        // No option specified\r\n");
 } 
            this.Write("\r\n\r\n    //\r\n    // TypeConverter\r\n    //\r\n\r\n    /// <summary>System.ComponentMode" +
                    "l.TypeConverter</summary>\r\n    private class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("TypeConverter : System.ComponentModel.TypeConverter\r\n    {\r\n        private stati" +
                    "c readonly Type WrapperType = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(");\r\n        private static readonly Type ValueType = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(@");

        /// <summary>CanConvertFrom</summary>
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, Type sourceType)
        {
            if (sourceType == WrapperType || sourceType == ValueType)
            {
                return true;
            }

            return base.CanConvertFrom(context, sourceType);
        }

        /// <summary>CanConvertTo</summary>
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext? context, Type? destinationType)
        {
            if (destinationType == WrapperType || destinationType == ValueType)
            {
                return true;
            }

            return base.CanConvertTo(context, destinationType);
        }

        /// <summary>ConvertFrom</summary>
        public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value)
        {
            if (value != null)
            {
                var t = value.GetType();
                if (t == typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("))\r\n                {\r\n                    return (");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(")value;\r\n                }\r\n                if (t == typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write("))\r\n                {\r\n                    return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(")value);\r\n                }\r\n            }\r\n            else\r\n            {\r\n    " +
                    "            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@".NullValue;
            }

            return base.ConvertFrom(context, culture, value);
        }

        /// <summary>ConvertTo</summary>
        public override object? ConvertTo(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object? value, Type destinationType)
        {
            if (value is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(@" wrappedValue)
            {
                if (destinationType == WrapperType)
                {
                    return wrappedValue;
                }

                if (destinationType == ValueType)
                {
                    return wrappedValue.GetOrNull();
                }
            }

            return base.ConvertTo(context, culture, value, destinationType);
        }
    }

");
 if (HasFlag(UnitGenOpts.JsonConverter)) { 
            this.Write("\r\n    //\r\n    // UnitGenOpts.JsonConverter\r\n    //\r\n\r\n    /// <summary>JsonConver" +
                    "ter</summary>\r\n    private class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("JsonConverter : JsonConverter<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(">\r\n    {\r\n        /// <summary>HandleNull</summary>\r\n        public override bool" +
                    " HandleNull\r\n            => true;\r\n\r\n        /// <summary>Write</summary>\r\n     " +
                    "   public override void Write(Utf8JsonWriter writer, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, JsonSerializerOptions options)\r\n        {\r\n            // undefined; valu" +
                    "e.IsUndef の場合は null として出力\r\n\r\n            var converter = options.GetConverter(ty" +
                    "peof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")) as JsonConverter<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(">;\r\n            if (converter is not null)\r\n            {\r\n                if (!v" +
                    "alue.IsUndef)\r\n                    converter.Write(writer, (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")value.GetOrNull(), options);\r\n                else\r\n                    converte" +
                    "r.Write(writer, null, options);\r\n            }\r\n            else\r\n              " +
                    "  throw new JsonException($\"{typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")} converter does not found.\");\r\n        }\r\n\r\n        /// <summary>Read</summary>" +
                    "\r\n        public override ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions option" +
                    "s)\r\n        {\r\n            var converter = options.GetConverter(typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")) as JsonConverter<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(">;\r\n            if (converter is not null)\r\n            {\r\n                var re" +
                    "s = (reader.TokenType) switch\r\n                {\r\n                    JsonTokenT" +
                    "ype.Null => ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".NullValue,\r\n                    JsonTokenType.None => ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".UndefValue,\r\n                    _ => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(converter.Read(ref reader, typeToConvert, options))\r\n                };\r\n       " +
                    "         return res;\r\n            }\r\n            else\r\n            {\r\n          " +
                    "      throw new JsonException($\"{typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")} converter does not found.\");\r\n            }\r\n        }\r\n\r\n");
 if (HasFlag(UnitGenOpts.JsonConverterDictionaryKey)) {  
            this.Write("        /// <summary>WriteAsPropertyName</summary>\r\n        public override void " +
                    "WriteAsPropertyName(Utf8JsonWriter writer, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, JsonSerializerOptions options)\r\n        {\r\n");
if (IsSupportUtf8Formatter()) {  
            this.Write(@"            Span<byte> buffer = stackalloc byte[36];
            if (System.Buffers.Text.Utf8Formatter.TryFormat(value.m_value, buffer, out var written))
            {
                writer.WritePropertyName(buffer.Slice(0, written));
            }
            else
            {
                writer.WritePropertyName(value.m_value.ToString());
            }
");
 } else if (IsDateOnly) { 
            this.Write("            writer.WritePropertyName(value.m_value.ToString(\"yyyy-MM-dd\"));\r\n");
 } else if (IsTimeOnly) { 
            this.Write("            writer.WritePropertyName(value.m_value.ToString(\"HH:mm:ss.FFFFFFF\"));" +
                    "\r\n");
 } else if (IsUlid) { 
            this.Write("            writer.WritePropertyName(value.m_value.ToString());\r\n");
 } else { 
            this.Write("            writer.WritePropertyName(value.m_value.ToString());\r\n");
 } 
            this.Write("        }\r\n\r\n        /// <summary>ReadAsPropertyName</summary>\r\n        public ov" +
                    "erride ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" ReadAsPropertyName(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializer" +
                    "Options options)\r\n        {\r\n");
if (IsSupportUtf8Formatter()) {  
            this.Write("            if (System.Buffers.Text.Utf8Parser.TryParse(reader.ValueSpan, out ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(" value, out var consumed))\r\n            {\r\n                return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(value);\r\n            }\r\n            else\r\n            {\r\n                return " +
                    "new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".Parse(reader.GetString()));\r\n            }\r\n");
 } else if (IsDateOnly) { 
            this.Write("            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".Parse(reader.GetString()));\r\n");
 } else if (IsTimeOnly) { 
            this.Write("            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".Parse(reader.GetString()));\r\n");
 } else if ( IsUlid) { 
            this.Write("            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".Parse(reader.GetString()));\r\n");
 } else if(TypeName == "string")  { 
            this.Write("            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(reader.GetString());\r\n");
 } else { 
            this.Write("            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(".Parse(reader.GetString()));\r\n");
 } 
            this.Write("        }\r\n");
 } 
            this.Write("    }\r\n\r\n");
 } 
 if (HasFlag(UnitGenOpts.DapperTypeHandler)) { 
            this.Write("\r\n#if !UGO_DAPPER_DISABLE\r\n    //\r\n    // UnitGenOpts.DapperTypeHandler\r\n    //\r\n" +
                    "\r\n    /// <summary>Dapper.SqlMapper.TypeHandler</summary>\r\n    public class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("DapperTypeHandler : Dapper.SqlMapper.TypeHandler<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(">\r\n    {\r\n        /// <summary>Parse</summary>\r\n        public override ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" Parse(object value)\r\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("((");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")value);\r\n        }\r\n\r\n        /// <summary>SetValue</summary>\r\n        public ov" +
                    "erride void SetValue(System.Data.IDbDataParameter parameter, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value)\r\n        {\r\n            parameter.DbType = System.Data.DbType.");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetDbType()));
            this.Write(";\r\n            parameter.Value = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")value.GetOrNull();\r\n        }\r\n    }\r\n\r\n    /// <summary>Dapper.SqlMapper.AddTyp" +
                    "eHandler</summary>\r\n    [ModuleInitializer]\r\n    public static void ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("AddDapperTypeHandler()\r\n    {\r\n        Dapper.SqlMapper.AddTypeHandler(new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(".");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("DapperTypeHandler());\r\n    }\r\n#endif\r\n\r\n");
 } 
 if (HasFlag(UnitGenOpts.EntityFrameworkValueConverter)) { 
            this.Write("\r\n#if !UGO_ENTITYFRAMEWORK_DISABLE\r\n    //\r\n    // UnitGenOpts.EntityFrameworkVal" +
                    "ueConverter\r\n    //\r\n\r\n    /// <summary>Microsoft.EntityFrameworkCore.Storage.Va" +
                    "lueConversion.ValueConverter</summary>\r\n    public class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("EntityFrameworkValueConverter : Microsoft.EntityFrameworkCore.Storage.ValueConver" +
                    "sion.ValueConverter<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(", ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(">\r\n    {\r\n        /// <summary>ValueConverter</summary>\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("EntityFrameworkValueConverter()\r\n            : base(\r\n                    convert" +
                    "ToProviderExpression: x => (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")x.GetOrNull(),\r\n                    convertFromProviderExpression: x => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x))\r\n        {\r\n        }\r\n\r\n        /// <summary>ValueConverter</summary>\r\n    " +
                    "    public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("EntityFrameworkValueConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversi" +
                    "on.ConverterMappingHints mappingHints = null)\r\n            : base(\r\n            " +
                    "        convertToProviderExpression: x => (");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeNameNullable));
            this.Write(")x.GetOrNull(),\r\n                    convertFromProviderExpression: x => new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(x),\r\n                    mappingHints: mappingHints)\r\n        {\r\n        }\r\n    " +
                    "}\r\n#endif\r\n\r\n");
 } 
 if (HasFlag(UnitGenOpts.MessagePackFormatter)) { 
            this.Write("\r\n#if !UGO_MESSAGEPACK_DISABLE\r\n    //\r\n    // UnitGenOpts.MessagePackFormatter\r\n" +
                    "    //\r\n\r\n    /// <summary>IMessagePackFormatter</summary>\r\n    private class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("MessagePackFormatter : IMessagePackFormatter<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(">\r\n    {\r\n        /// <summary>Serialize</summary>\r\n        public void Serialize" +
                    "(ref MessagePackWriter writer, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, MessagePackSerializerOptions options)\r\n        {\r\n            options.Res" +
                    "olver.GetFormatterWithVerify<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(">().Serialize(ref writer, value.m_value, options);\r\n        }\r\n\r\n        /// <sum" +
                    "mary>Deserialize</summary>\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\r" +
                    "\n        {\r\n            return new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(options.Resolver.GetFormatterWithVerify<");
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeName));
            this.Write(">().Deserialize(ref reader, options));\r\n        }\r\n    }\r\n#endif\r\n\r\n");
 } 
            this.Write("\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class CodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
